apiVersion: apps/v1
kind: Deployment
metadata:
  name: testing-agent
  namespace: gocars-testing
  labels:
    app: testing-agent
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: testing-agent
  template:
    metadata:
      labels:
        app: testing-agent
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: testing-agent
        image: gocars/testing-agent:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: api
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: testing-agent-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: testing-agent-config
              key: LOG_LEVEL
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: testing-agent-config
              key: METRICS_ENABLED
        - name: AUTO_FIX_ENABLED
          valueFrom:
            configMapKeyRef:
              name: testing-agent-config
              key: AUTO_FIX_ENABLED
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: testing-agent-config
              key: REDIS_HOST
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: testing-agent-config
              key: POSTGRES_HOST
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: testing-agent-config
              key: POSTGRES_USER
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: testing-agent-config
              key: POSTGRES_DB
        - name: FIREBASE_API_KEY
          valueFrom:
            secretKeyRef:
              name: testing-agent-secrets
              key: FIREBASE_API_KEY
        - name: FIREBASE_PROJECT_ID
          valueFrom:
            secretKeyRef:
              name: testing-agent-secrets
              key: FIREBASE_PROJECT_ID
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: testing-agent-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: reports
          mountPath: /app/reports
        - name: firebase-service-account
          mountPath: /app/config/firebase
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: testing-agent-logs-pvc
      - name: reports
        persistentVolumeClaim:
          claimName: testing-agent-reports-pvc
      - name: firebase-service-account
        secret:
          secretName: firebase-service-account
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: gocars-testing
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: gocars-testing
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: testing-agent-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: testing-agent-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: testing-agent-secrets
              key: POSTGRES_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - testingagent
            - -d
            - testing_agent
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - testingagent
            - -d
            - testing_agent
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc
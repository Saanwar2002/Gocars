# Docker Compose configuration for GoCars Testing Agent
version: '3.8'

services:
  # Main Testing Agent Service
  testing-agent:
    build:
      context: .
      target: production
    container_name: gocars-testing-agent
    ports:
      - "3000:3000"
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - METRICS_PORT=8080
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/gocars-testing
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/gocars_testing
    volumes:
      - ./test-data:/app/test-data
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./config:/app/config:ro
    depends_on:
      - redis
      - mongodb
      - postgres
    restart: unless-stopped
    networks:
      - testing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development Testing Agent (for development)
  testing-agent-dev:
    build:
      context: .
      target: development
    container_name: gocars-testing-agent-dev
    ports:
      - "3001:3000"
      - "8081:8080"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - METRICS_PORT=8080
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/gocars-testing-dev
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/gocars_testing_dev
    volumes:
      - .:/app
      - /app/node_modules
      - ./test-data:/app/test-data
      - ./logs:/app/logs
    depends_on:
      - redis
      - mongodb
      - postgres
    restart: unless-stopped
    networks:
      - testing-network
    profiles:
      - dev

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: gocars-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-testingpassword}
    restart: unless-stopped
    networks:
      - testing-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for test data and results storage
  mongodb:
    image: mongo:6
    container_name: gocars-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-testingpassword}
      - MONGO_INITDB_DATABASE=gocars-testing
    volumes:
      - mongodb-data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - testing-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for structured test data
  postgres:
    image: postgres:15-alpine
    container_name: gocars-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=gocars_testing
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - testing-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: gocars-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - testing-network
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: gocars-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    networks:
      - testing-network
    profiles:
      - monitoring

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: gocars-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - testing-agent
    restart: unless-stopped
    networks:
      - testing-network
    profiles:
      - production

volumes:
  redis-data:
  mongodb-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  testing-network:
    driver: bridge